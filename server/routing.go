package server

// This file is generated by the FHIR golang generator.  This file should not be manually modified.

import (
	"net/http"

	"github.com/gin-gonic/contrib/sessions"
	"github.com/gin-gonic/gin"
	"github.com/intervention-engine/fhir/auth"
	"github.com/mitre/heart"
	"golang.org/x/oauth2"
)

// RegisterController registers the CRUD routes (and middleware) for a FHIR resource
func RegisterController(name string, e *gin.Engine, m []gin.HandlerFunc, dal DataAccessLayer, config Config) {
	rc := NewResourceController(name, dal, config)
	rcBase := e.Group("/" + name)

	if len(m) > 0 {
		rcBase.Use(m...)
	}

	switch config.Auth.Method {
	case auth.AuthTypeNone:
		// do nothing
	case auth.AuthTypeOIDC:
		rcBase.Use(auth.HEARTScopesHandler(name))
	case auth.AuthTypeHEART:
		rcBase.Use(auth.HEARTScopesHandler(name))
	}

	rcBase.GET("", rc.IndexHandler)
	rcBase.POST("", rc.CreateHandler)
	rcBase.PUT("", rc.ConditionalUpdateHandler)
	rcBase.DELETE("", rc.ConditionalDeleteHandler)

	rcItem := rcBase.Group("/:id")
	rcItem.GET("", rc.ShowHandler)
	rcItem.PUT("", rc.UpdateHandler)
	rcItem.DELETE("", rc.DeleteHandler)

	if name == "Patient" || name == "Encounter" {
		everythingItem := rcItem.Group("/$everything")
		everythingItem.GET("", rc.EverythingHandler)
	}
}

// RegisterRoutes registers the routes for each of the FHIR resources
func RegisterRoutes(e *gin.Engine, config map[string][]gin.HandlerFunc, dal DataAccessLayer, serverConfig Config) {

	switch serverConfig.Auth.Method {
	case auth.AuthTypeNone:
		// do nothing
	case auth.AuthTypeOIDC:
		// Set up sessions so we can keep track of the logged in user
		store := sessions.NewCookieStore([]byte(serverConfig.Auth.SessionSecret))
		e.Use(sessions.Sessions("mysession", store))
		// The OIDCAuthenticationHandler is set up before the IndexHandler in the handler function
		// chain. It will check to see if the user is logged in based on their session. If they are not
		// the user will be redirected to the authentication endpoint at the OP.
		oauthConfig := oauth2.Config{ClientID: serverConfig.Auth.ClientID,
			ClientSecret: serverConfig.Auth.ClientSecret,
			Endpoint: oauth2.Endpoint{AuthURL: serverConfig.Auth.AuthorizationURL,
				TokenURL: serverConfig.Auth.TokenURL},
		}
		oidcHandler := auth.OIDCAuthenticationHandler(oauthConfig)
		oauthHandler := auth.OAuthIntrospectionHandler(serverConfig.Auth.ClientID,
			serverConfig.Auth.ClientSecret, serverConfig.Auth.IntrospectionURL)
		e.Use(func(c *gin.Context) {
			if c.Request.Header.Get("Authorization") != "" {
				oauthHandler(c)
			} else {
				oidcHandler(c)
			}
		})
		// This handler is to take the redirect from the OP when the user logs in. It will
		// then fetch information about the user by hitting the user info endpoint and put
		// that in the session. Lastly, this handler is set up to redirect the user back
		// to the root.
		e.GET("/redirect", auth.RedirectHandler(oauthConfig, serverConfig.ServerURL,
			serverConfig.Auth.UserInfoURL))
		e.GET("/logout", heart.LogoutHandler)

	case auth.AuthTypeHEART:
		heart.SetUpRoutes(serverConfig.Auth.JWKPath, serverConfig.Auth.ClientID, serverConfig.Auth.OPURL,
			serverConfig.ServerURL, serverConfig.Auth.SessionSecret, e)

	}

	// Batch Support
	batch := NewBatchController(dal, serverConfig)
	batchHandlers := make([]gin.HandlerFunc, len(config["Batch"]))
	copy(batchHandlers, config["Batch"])
	batchHandlers = append(batchHandlers, batch.Post)
	e.POST("/", batchHandlers...)

	// Conformance Statement
	e.StaticFile("metadata", "conformance/capability_statement.json")

	// Redirect server root to /metadata
	e.GET("/", func(c *gin.Context) {
		c.Redirect(http.StatusPermanentRedirect, "/metadata")
	})

	// Resources
	RegisterController("Account", e, config["Account"], dal, serverConfig)
	RegisterController("ActivityDefinition", e, config["ActivityDefinition"], dal, serverConfig)
	RegisterController("AdverseEvent", e, config["AdverseEvent"], dal, serverConfig)
	RegisterController("AllergyIntolerance", e, config["AllergyIntolerance"], dal, serverConfig)
	RegisterController("Appointment", e, config["Appointment"], dal, serverConfig)
	RegisterController("AppointmentResponse", e, config["AppointmentResponse"], dal, serverConfig)
	RegisterController("AuditEvent", e, config["AuditEvent"], dal, serverConfig)
	RegisterController("Basic", e, config["Basic"], dal, serverConfig)
	RegisterController("Binary", e, config["Binary"], dal, serverConfig)
	RegisterController("BiologicallyDerivedProduct", e, config["BiologicallyDerivedProduct"], dal, serverConfig)
	RegisterController("BodyStructure", e, config["BodyStructure"], dal, serverConfig)
	RegisterController("Bundle", e, config["Bundle"], dal, serverConfig)
	RegisterController("CapabilityStatement", e, config["CapabilityStatement"], dal, serverConfig)
	RegisterController("CarePlan", e, config["CarePlan"], dal, serverConfig)
	RegisterController("CareTeam", e, config["CareTeam"], dal, serverConfig)
	RegisterController("CatalogEntry", e, config["CatalogEntry"], dal, serverConfig)
	RegisterController("ChargeItem", e, config["ChargeItem"], dal, serverConfig)
	RegisterController("ChargeItemDefinition", e, config["ChargeItemDefinition"], dal, serverConfig)
	RegisterController("Claim", e, config["Claim"], dal, serverConfig)
	RegisterController("ClaimResponse", e, config["ClaimResponse"], dal, serverConfig)
	RegisterController("ClinicalImpression", e, config["ClinicalImpression"], dal, serverConfig)
	RegisterController("CodeSystem", e, config["CodeSystem"], dal, serverConfig)
	RegisterController("Communication", e, config["Communication"], dal, serverConfig)
	RegisterController("CommunicationRequest", e, config["CommunicationRequest"], dal, serverConfig)
	RegisterController("CompartmentDefinition", e, config["CompartmentDefinition"], dal, serverConfig)
	RegisterController("Composition", e, config["Composition"], dal, serverConfig)
	RegisterController("ConceptMap", e, config["ConceptMap"], dal, serverConfig)
	RegisterController("Condition", e, config["Condition"], dal, serverConfig)
	RegisterController("Consent", e, config["Consent"], dal, serverConfig)
	RegisterController("Contract", e, config["Contract"], dal, serverConfig)
	RegisterController("Coverage", e, config["Coverage"], dal, serverConfig)
	RegisterController("CoverageEligibilityRequest", e, config["CoverageEligibilityRequest"], dal, serverConfig)
	RegisterController("CoverageEligibilityResponse", e, config["CoverageEligibilityResponse"], dal, serverConfig)
	RegisterController("DetectedIssue", e, config["DetectedIssue"], dal, serverConfig)
	RegisterController("Device", e, config["Device"], dal, serverConfig)
	RegisterController("DeviceDefinition", e, config["DeviceDefinition"], dal, serverConfig)
	RegisterController("DeviceMetric", e, config["DeviceMetric"], dal, serverConfig)
	RegisterController("DeviceRequest", e, config["DeviceRequest"], dal, serverConfig)
	RegisterController("DeviceUseStatement", e, config["DeviceUseStatement"], dal, serverConfig)
	RegisterController("DiagnosticReport", e, config["DiagnosticReport"], dal, serverConfig)
	RegisterController("DocumentManifest", e, config["DocumentManifest"], dal, serverConfig)
	RegisterController("DocumentReference", e, config["DocumentReference"], dal, serverConfig)
	RegisterController("EffectEvidenceSynthesis", e, config["EffectEvidenceSynthesis"], dal, serverConfig)
	RegisterController("Encounter", e, config["Encounter"], dal, serverConfig)
	RegisterController("Endpoint", e, config["Endpoint"], dal, serverConfig)
	RegisterController("EnrollmentRequest", e, config["EnrollmentRequest"], dal, serverConfig)
	RegisterController("EnrollmentResponse", e, config["EnrollmentResponse"], dal, serverConfig)
	RegisterController("EpisodeOfCare", e, config["EpisodeOfCare"], dal, serverConfig)
	RegisterController("EventDefinition", e, config["EventDefinition"], dal, serverConfig)
	RegisterController("Evidence", e, config["Evidence"], dal, serverConfig)
	RegisterController("EvidenceVariable", e, config["EvidenceVariable"], dal, serverConfig)
	RegisterController("ExampleScenario", e, config["ExampleScenario"], dal, serverConfig)
	RegisterController("ExplanationOfBenefit", e, config["ExplanationOfBenefit"], dal, serverConfig)
	RegisterController("FamilyMemberHistory", e, config["FamilyMemberHistory"], dal, serverConfig)
	RegisterController("Flag", e, config["Flag"], dal, serverConfig)
	RegisterController("Goal", e, config["Goal"], dal, serverConfig)
	RegisterController("GraphDefinition", e, config["GraphDefinition"], dal, serverConfig)
	RegisterController("Group", e, config["Group"], dal, serverConfig)
	RegisterController("GuidanceResponse", e, config["GuidanceResponse"], dal, serverConfig)
	RegisterController("HealthcareService", e, config["HealthcareService"], dal, serverConfig)
	RegisterController("ImagingStudy", e, config["ImagingStudy"], dal, serverConfig)
	RegisterController("Immunization", e, config["Immunization"], dal, serverConfig)
	RegisterController("ImmunizationEvaluation", e, config["ImmunizationEvaluation"], dal, serverConfig)
	RegisterController("ImmunizationRecommendation", e, config["ImmunizationRecommendation"], dal, serverConfig)
	RegisterController("ImplementationGuide", e, config["ImplementationGuide"], dal, serverConfig)
	RegisterController("InsurancePlan", e, config["InsurancePlan"], dal, serverConfig)
	RegisterController("Invoice", e, config["Invoice"], dal, serverConfig)
	RegisterController("Library", e, config["Library"], dal, serverConfig)
	RegisterController("Linkage", e, config["Linkage"], dal, serverConfig)
	RegisterController("List", e, config["List"], dal, serverConfig)
	RegisterController("Location", e, config["Location"], dal, serverConfig)
	RegisterController("Measure", e, config["Measure"], dal, serverConfig)
	RegisterController("MeasureReport", e, config["MeasureReport"], dal, serverConfig)
	RegisterController("Media", e, config["Media"], dal, serverConfig)
	RegisterController("Medication", e, config["Medication"], dal, serverConfig)
	RegisterController("MedicationAdministration", e, config["MedicationAdministration"], dal, serverConfig)
	RegisterController("MedicationDispense", e, config["MedicationDispense"], dal, serverConfig)
	RegisterController("MedicationKnowledge", e, config["MedicationKnowledge"], dal, serverConfig)
	RegisterController("MedicationRequest", e, config["MedicationRequest"], dal, serverConfig)
	RegisterController("MedicationStatement", e, config["MedicationStatement"], dal, serverConfig)
	RegisterController("MedicinalProduct", e, config["MedicinalProduct"], dal, serverConfig)
	RegisterController("MedicinalProductAuthorization", e, config["MedicinalProductAuthorization"], dal, serverConfig)
	RegisterController("MedicinalProductContraindication", e, config["MedicinalProductContraindication"], dal, serverConfig)
	RegisterController("MedicinalProductIndication", e, config["MedicinalProductIndication"], dal, serverConfig)
	RegisterController("MedicinalProductIngredient", e, config["MedicinalProductIngredient"], dal, serverConfig)
	RegisterController("MedicinalProductInteraction", e, config["MedicinalProductInteraction"], dal, serverConfig)
	RegisterController("MedicinalProductManufactured", e, config["MedicinalProductManufactured"], dal, serverConfig)
	RegisterController("MedicinalProductPackaged", e, config["MedicinalProductPackaged"], dal, serverConfig)
	RegisterController("MedicinalProductPharmaceutical", e, config["MedicinalProductPharmaceutical"], dal, serverConfig)
	RegisterController("MedicinalProductUndesirableEffect", e, config["MedicinalProductUndesirableEffect"], dal, serverConfig)
	RegisterController("MessageDefinition", e, config["MessageDefinition"], dal, serverConfig)
	RegisterController("MessageHeader", e, config["MessageHeader"], dal, serverConfig)
	RegisterController("MolecularSequence", e, config["MolecularSequence"], dal, serverConfig)
	RegisterController("NamingSystem", e, config["NamingSystem"], dal, serverConfig)
	RegisterController("NutritionOrder", e, config["NutritionOrder"], dal, serverConfig)
	RegisterController("Observation", e, config["Observation"], dal, serverConfig)
	RegisterController("ObservationDefinition", e, config["ObservationDefinition"], dal, serverConfig)
	RegisterController("OperationDefinition", e, config["OperationDefinition"], dal, serverConfig)
	RegisterController("OperationOutcome", e, config["OperationOutcome"], dal, serverConfig)
	RegisterController("Organization", e, config["Organization"], dal, serverConfig)
	RegisterController("OrganizationAffiliation", e, config["OrganizationAffiliation"], dal, serverConfig)
	RegisterController("Patient", e, config["Patient"], dal, serverConfig)
	RegisterController("PaymentNotice", e, config["PaymentNotice"], dal, serverConfig)
	RegisterController("PaymentReconciliation", e, config["PaymentReconciliation"], dal, serverConfig)
	RegisterController("Person", e, config["Person"], dal, serverConfig)
	RegisterController("PlanDefinition", e, config["PlanDefinition"], dal, serverConfig)
	RegisterController("Practitioner", e, config["Practitioner"], dal, serverConfig)
	RegisterController("PractitionerRole", e, config["PractitionerRole"], dal, serverConfig)
	RegisterController("Procedure", e, config["Procedure"], dal, serverConfig)
	RegisterController("Provenance", e, config["Provenance"], dal, serverConfig)
	RegisterController("Questionnaire", e, config["Questionnaire"], dal, serverConfig)
	RegisterController("QuestionnaireResponse", e, config["QuestionnaireResponse"], dal, serverConfig)
	RegisterController("RelatedPerson", e, config["RelatedPerson"], dal, serverConfig)
	RegisterController("RequestGroup", e, config["RequestGroup"], dal, serverConfig)
	RegisterController("ResearchDefinition", e, config["ResearchDefinition"], dal, serverConfig)
	RegisterController("ResearchElementDefinition", e, config["ResearchElementDefinition"], dal, serverConfig)
	RegisterController("ResearchStudy", e, config["ResearchStudy"], dal, serverConfig)
	RegisterController("ResearchSubject", e, config["ResearchSubject"], dal, serverConfig)
	RegisterController("RiskAssessment", e, config["RiskAssessment"], dal, serverConfig)
	RegisterController("RiskEvidenceSynthesis", e, config["RiskEvidenceSynthesis"], dal, serverConfig)
	RegisterController("Schedule", e, config["Schedule"], dal, serverConfig)
	RegisterController("SearchParameter", e, config["SearchParameter"], dal, serverConfig)
	RegisterController("ServiceRequest", e, config["ServiceRequest"], dal, serverConfig)
	RegisterController("Slot", e, config["Slot"], dal, serverConfig)
	RegisterController("Specimen", e, config["Specimen"], dal, serverConfig)
	RegisterController("SpecimenDefinition", e, config["SpecimenDefinition"], dal, serverConfig)
	RegisterController("StructureDefinition", e, config["StructureDefinition"], dal, serverConfig)
	RegisterController("StructureMap", e, config["StructureMap"], dal, serverConfig)
	RegisterController("Subscription", e, config["Subscription"], dal, serverConfig)
	RegisterController("Substance", e, config["Substance"], dal, serverConfig)
	RegisterController("SubstanceNucleicAcid", e, config["SubstanceNucleicAcid"], dal, serverConfig)
	RegisterController("SubstancePolymer", e, config["SubstancePolymer"], dal, serverConfig)
	RegisterController("SubstanceProtein", e, config["SubstanceProtein"], dal, serverConfig)
	RegisterController("SubstanceReferenceInformation", e, config["SubstanceReferenceInformation"], dal, serverConfig)
	RegisterController("SubstanceSourceMaterial", e, config["SubstanceSourceMaterial"], dal, serverConfig)
	RegisterController("SubstanceSpecification", e, config["SubstanceSpecification"], dal, serverConfig)
	RegisterController("SupplyDelivery", e, config["SupplyDelivery"], dal, serverConfig)
	RegisterController("SupplyRequest", e, config["SupplyRequest"], dal, serverConfig)
	RegisterController("Task", e, config["Task"], dal, serverConfig)
	RegisterController("TerminologyCapabilities", e, config["TerminologyCapabilities"], dal, serverConfig)
	RegisterController("TestReport", e, config["TestReport"], dal, serverConfig)
	RegisterController("TestScript", e, config["TestScript"], dal, serverConfig)
	RegisterController("ValueSet", e, config["ValueSet"], dal, serverConfig)
	RegisterController("VerificationResult", e, config["VerificationResult"], dal, serverConfig)
	RegisterController("VisionPrescription", e, config["VisionPrescription"], dal, serverConfig)
}
